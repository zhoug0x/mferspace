import { createContext, useContext } from 'react';
import { useRouter } from 'next/router';
import { ethers } from 'ethers';
import Cookies from 'js-cookie';

import {
	NONCE_ENDPOINT,
	VERIFICATION_ENDPOINT,
	AUTH_TIMEOUT,
} from '../config/constants';

// so TypeScript allows `window.ethereum`
declare const window: any;

interface AuthContextProps {
	login: Function;
	logout: Function;
}

const AuthContext = createContext<AuthContextProps>({} as AuthContextProps);
export const useAuthContext = () => useContext(AuthContext);

export const AuthProvider: React.FC = ({ children }) => {
	const router = useRouter();

	// Fetch server & client auth cookies
	const login = async () => {
		if (window.ethereum) {
			try {
				// Connect to user wallet
				const provider = new ethers.providers.Web3Provider(window.ethereum);
				const signer = provider.getSigner();
				const signerAddress = await signer.getAddress();

				// Fetch user nonce from DB (if no DB record exists for user, one will be generated by backend)
				const nonceResult = await fetch(NONCE_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ address: signerAddress }),
				}).then(res => res.json());

				// Sign fetched nonce with wallet
				const signature = await signer.signMessage(
					nonceResult.nonce.toString()
				);

				// Send signature to server for verification
				const authResult = await fetch(VERIFICATION_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ address: signerAddress, signature }),
				}).then(res => res.json());

				// If verification good, drop cookie with authenticated address for later use
				if (authResult.ok) {
					Cookies.set('address', signerAddress, {
						expires: Math.floor(Date.now() / 1000) + AUTH_TIMEOUT,
					});
				} else {
					console.warn('Invalid signature - unable to login');
				}
			} catch (error) {
				console.log(error);
				alert(
					'Error! make sure MetaMask is logged in & connected to mainnet...'
				);
			}
		}
	};

	// To logout, remove auth cookies & redirect to home
	const logout = () => {
		Cookies.remove('address');
		router.push('/');
	};

	const value = { login, logout };

	return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
