import React, { useState, useEffect, createContext, useContext } from 'react';
import Cookies from 'cookies';
import { NONCE_ENDPOINT, VERIFICATION_ENDPOINT } from '../config/constants';

interface AuthContextProps {
	isAuthenticated: boolean;
	login: Function;
	logout: Function;
}

interface AuthProviderProps {
	children?: React.ReactNode;
	hasAuthToken?: boolean;
}

const AuthContext = createContext<AuthContextProps>({} as AuthContextProps);
export const useAuthContext = () => useContext(AuthContext);

const AuthProvider: React.FC<AuthProviderProps> = ({
	children,
}) => {
	const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);

	// TODO: type arg as ethers.js signer
	const login = async (signer: any) => {
		try {
			const signerAddress = await signer.getAddress();

			// Fetch user nonce from DB (if no DB record exists for user, one will be generated by backend)
			const nonceResult = await fetch(NONCE_ENDPOINT, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ address: signerAddress }),
			}).then(res => res.json());

			// Sign fetched nonce with connected address
			const signature = await signer.signMessage(nonceResult.nonce.toString());

			// Send signature to server for verification
			const authResult = await fetch(VERIFICATION_ENDPOINT, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ address: signerAddress, signature }),
			}).then(res => res.json());





      // TODO:

			// If auth successful, drop a cookie on client with authenticated address
			if (authResult.ok) {



        // TODO: drop a cookie with the authenticated signer address - `signerAddress`
        // then check for client-side authentication cookie on each page load

        // client side cookie lib?


        setIsAuthenticated(true)


      } else {
				alert('Login attempt unsuccessful...');
      }




		} catch (error: any) {
			// If user rejects connect request, just return silently
			if (error.code === 4001) return;

			console.error(error);
			alert('Error authenicating - check console for error details...');
		}
	};

	const logout = () => {
		// TODO: implement logout - scrub cookies, force a refresh?

    setIsAuthenticated(false)
	};

	return (
		<AuthContext.Provider value={{ isAuthenticated, login, logout }}>
			{children}
		</AuthContext.Provider>
	);
};

export default AuthProvider;
