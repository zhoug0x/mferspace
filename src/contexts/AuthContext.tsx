import { createContext, useContext } from 'react';
import { useRouter } from 'next/router';
import { ethers } from 'ethers';
import { NONCE_ENDPOINT, VERIFICATION_ENDPOINT } from '../config/constants';

// so TypeScript allows `window.ethereum`
declare const window: any;

interface AuthContextProps {
	login: Function;
	logout: Function;
}

const AuthContext = createContext<AuthContextProps>({} as AuthContextProps);
export const useAuthContext = () => useContext(AuthContext);

export const AuthProvider: React.FC<{ children: any }> = ({ children }) => {
	const router = useRouter();

	// Fetch server & client auth cookies
	const login = async () => {
		if (window.ethereum) {
			try {
				// Connect to user wallet
				const provider = new ethers.providers.Web3Provider(window.ethereum);
				await provider.send('eth_requestAccounts', []);
				const signer = provider.getSigner();
				const signerAddress = await signer.getAddress();

				// Fetch user nonce from DB (if no DB record exists for user, one will be generated by backend)
				const nonceResult = await fetch(NONCE_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ address: signerAddress }),
				}).then(res => res.json());

				// Sign fetched nonce with wallet
				const signature = await signer.signMessage(
					nonceResult.nonce.toString()
				);

				// Send signature to server for verification
				const authResult = await fetch(VERIFICATION_ENDPOINT, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ address: signerAddress, signature }),
				}).then(res => res.json());

				// If auth successful, force a refresh to check token on server
				if (authResult.ok) {
					router.push('/');
				} else {
					alert('Login attempt unsuccessful...');
				}
			} catch (error: any) {
				if (error.code === 4001) {
					alert('Connection request rejected...');
				}
				console.error(error);
				alert('Error authenicating - check console for error details...');
			}
		}
	};

	// To logout, remove auth cookies & redirect to home
	const logout = () => {
		alert(
			'Logout has yet to be implemented!\nCurrently, logins have an expiry one of hour.\nThat means unfortunately the current logout system is *time*'
		);
	};

	const value = { login, logout };

	return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
