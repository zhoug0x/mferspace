import { useWeb3Context } from '../contexts/Web3Context';
import { NONCE_ENDPOINT, VERIFICATION_ENDPOINT } from '../config/constants';

const useAuth = () => {
	const { provider } = useWeb3Context();

	const login = async () => {
		try {
			if (!provider) {
				throw new Error(`Invalid web3 provider, recieved: ${provider}`);
			}

			// Get address signer
			const signer = provider.getSigner();
			const signerAddress = await signer.getAddress();

			// Fetch user nonce from DB (if no DB record exists for user, one will be generated by backend)
			const nonceResult = await fetch(NONCE_ENDPOINT, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ address: signerAddress }),
			}).then(res => res.json());

			// Sign fetched nonce with connected address
			const signature = await signer.signMessage(nonceResult.nonce.toString());

			// Send signature to server for verification
			const authResult = await fetch(VERIFICATION_ENDPOINT, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ address: signerAddress, signature }),
			}).then(res => res.json());

			// If auth successful, force a refresh to check token on server
			if (!authResult.ok) {
				alert('Login attempt unsuccessful...');
			}
		} catch (error: any) {
			// If user rejects connect request, just return silently
			if (error.code === 4001) return;

			console.error(error);
			alert('Error authenicating - check console for error details...');
		}
	};

	const logout = () => {
		// TODO: implement logout - scrub cookies, force a refresh?
	};

	const isAuthenticated = () => {
		// TODO: check browser cookie
		// return TRUE if:
		// token exists
		// token from correct domain (how do u do this)
		// token not expired
	};

	return { login, logout };
};

export default useAuth;
